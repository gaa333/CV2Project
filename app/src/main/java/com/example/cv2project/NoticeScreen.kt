package com.example.cv2project

import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.systemBarsPadding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.cv2project.auth.AuthManager
import com.example.cv2project.firebase.NoticeDatabase
import com.example.cv2project.firebase.StudentDatabase
import com.example.cv2project.models.Comment
import com.example.cv2project.models.Notice
import com.example.cv2project.models.Student
import java.net.URLEncoder
import java.nio.charset.StandardCharsets
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

/**
 * ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏúºÎ°ú ÏÇ¨Ïö©Ìï† Composable
 * - route Ïòà: "notice"
 */
@Composable
fun NoticeScreen(navController: NavController, noticeDb: NoticeDatabase, userRole: String) {
    val context = LocalContext.current
    var notices by remember { mutableStateOf<List<Notice>>(emptyList()) }


    LaunchedEffect(Unit) {
        noticeDb.getNotices { fetchedNotices ->
            notices = fetchedNotices
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .systemBarsPadding(),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Image(
                painter = painterResource(id = R.drawable.back),
                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                modifier = Modifier
                    .padding(start = 15.dp)
                    .size(25.dp)
                    .clickable {
                        navController.popBackStack()
                    }
            )

            Image(
                painter = painterResource(id = R.drawable.notice1),
                contentDescription = "ÏïåÎ¶ºÏû•",
                modifier = Modifier.size(150.dp)
            )

            Image(
                painter = painterResource(id = R.drawable.add),
                contentDescription = "Ï∂îÍ∞Ä",
                modifier = Modifier
                    .padding(end = 15.dp)
                    .size(30.dp)
                    .clickable {
                        if (userRole != "admin") {
                            Toast.makeText(context, "Í¥ÄÎ¶¨ÏûêÎßå Ïù¥Ïö© Í∞ÄÎä•Ìïú Í∏∞Îä•ÏûÖÎãàÎã§.", Toast.LENGTH_SHORT).show()
                        } else {
                            navController.navigate("addNotice")
                        }
                    }
            )
        }

        Column(
            modifier = Modifier
                .padding(10.dp)
                .fillMaxSize()
                .verticalScroll(rememberScrollState())
                .padding(bottom = 20.dp)
        ) {
            if (notices.isEmpty()) {
                Text("Îì±Î°ùÎêú ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§.", modifier = Modifier.padding(16.dp))
            } else {
                notices.forEach { notice ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp)
                            .clickable {
                                navController.navigate(
                                    run {
                                        val encodedTitle = URLEncoder.encode(
                                            notice.title,
                                            StandardCharsets.UTF_8.toString()
                                        )
                                        val encodedContent = URLEncoder.encode(
                                            notice.content,
                                            StandardCharsets.UTF_8.toString()
                                        )
                                        val encodedStudentName = URLEncoder.encode(
                                            notice.studentName,
                                            StandardCharsets.UTF_8.toString()
                                        )
                                        val encodedDate = URLEncoder.encode(
                                            notice.date,
                                            StandardCharsets.UTF_8.toString()
                                        )
                                        "detailNotice?id=${notice.id}" +
                                                "&title=${encodedTitle}" +
                                                "&content=${encodedContent}" +
                                                "&studentName=${encodedStudentName}" +
                                                "&date=${encodedDate}"
                                    }
                                )
                            },
                        colors = CardDefaults.cardColors(containerColor = Color(0xFFE0E0E0))
                    ) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            Text("üìÖ ${notice.date}")
                            Text("üéì ÌïôÏÉù: ${notice.studentName}")
                            Text("üìù Ï†úÎ™©: ${notice.title}")
                            Text("üìÑ ÎÇ¥Ïö©: ${notice.content}")
                        }
                    }
                }
            }
        }
    }
}

/**
 * ÏïåÎ¶ºÏû• ÏûëÏÑ± Composable
 * - Navigation GraphÏóêÏÑú routeÎ•º "addNotice"Î°ú Îì±Î°ùÌïòÍ≥†,
 *   navController.navigate("addNotice")Î°ú ÌôîÎ©¥ Ï†ÑÌôò
 */
@Composable
fun AddNoticeScreen(
    navController: NavController,
    studentDb: StudentDatabase,
    noticeDb: NoticeDatabase,
    userRole: String
) {
    var title by remember { mutableStateOf("") }
    var content by remember { mutableStateOf("") }
    var students by remember { mutableStateOf<List<Student>>(emptyList()) }
    var selectedStudent by remember { mutableStateOf<Student?>(null) }
    val todayDate = getTodayDate() // Ïò§Îäò ÎÇ†Ïßú Í∞ÄÏ†∏Ïò§Í∏∞
    var selectedTab by remember { mutableStateOf("ÏßÄÍ∏àÏ†ÑÏÜ°") }
    val tabs = listOf("ÏßÄÍ∏àÏ†ÑÏÜ°", "ÏûÑÏãúÏ†ÄÏû•", "ÏòàÏïΩÏ†ÑÏÜ°")

    var showDialog by remember { mutableStateOf(false) }

    // FirebaseÏóêÏÑú Ï†ÑÏ≤¥ ÌïôÏÉù Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
    LaunchedEffect(Unit) {
        studentDb.loadAllStudents { loadedStudents ->
            students = loadedStudents
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .systemBarsPadding(),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Start
        ) {
            Image(
                painter = painterResource(id = R.drawable.back),
                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                modifier = Modifier
                    .padding(start = 15.dp)
                    .size(25.dp)
                    .clickable {
                        navController.popBackStack()
                    }
            )
            Spacer(modifier = Modifier.weight(0.9f))
            Image(
                painter = painterResource(id = R.drawable.notice2),
                contentDescription = "ÏïåÎ¶ºÏû• ÏûëÏÑ±",
                modifier = Modifier.size(200.dp)
            )
            Spacer(modifier = Modifier.weight(1.1f))
        }
        Spacer(modifier = Modifier.height(15.dp))

        // ÌÉ≠ UI
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceEvenly,
            verticalAlignment = Alignment.CenterVertically
        ) {
            tabs.forEach { tab ->
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier.clickable { selectedTab = tab }
                ) {
                    Text(
                        text = tab,
                        fontSize = 20.sp,
                        fontWeight = if (selectedTab == tab) FontWeight.Bold else FontWeight.Normal,
                        color = if (selectedTab == tab) Color.Black else Color(0xFF828282),
                        modifier = Modifier.padding(vertical = 8.dp)
                    )
                    Box(
                        modifier = Modifier
                            .height(1.dp)
                            .width(80.dp)
                            .background(if (selectedTab == tab) Color(0xFFFF7800) else Color.Transparent)
                    )
                }
            }
        }
        Spacer(modifier = Modifier.height(25.dp))

        // ÌïôÏÉù ÏÑ†ÌÉù
        Text(
            text = selectedStudent?.name ?: "ÌïôÏÉù ÏÑ†ÌÉùÌïòÍ∏∞",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .padding(8.dp)
                .clickable {
                    showDialog = true
                }
        )

        // ÌïôÏÉù ÏÑ†ÌÉù Îã§Ïù¥ÏñºÎ°úÍ∑∏
        if (showDialog) {
            AlertDialog(
                onDismissRequest = { showDialog = false },
                title = {
                    Text(
                        "ÌïôÏÉù ÏÑ†ÌÉù",
                        fontWeight = FontWeight.Bold
                    )
                },
                text = {
                    Column {
                        Spacer(modifier = Modifier.height(10.dp))
                        students.forEach { student ->
                            Row(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .clickable {
                                        selectedStudent = student
                                        showDialog = false // ÏÑ†ÌÉù ÌõÑ Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
                                    }
                                    .padding(vertical = 8.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text(
                                    text = student.name,
                                    modifier = Modifier.weight(1f),
                                    textAlign = TextAlign.Center
                                )
                                if (selectedStudent == student) {
                                    Text("‚úîÔ∏è")
                                }
                            }
                        }
                    }
                },
                confirmButton = {
                    Button(
                        onClick = { showDialog = false },
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4786FF))
                    ) {
                        Text("Îã´Í∏∞", color = Color.White)
                    }
                }
            )
        }
        Spacer(modifier = Modifier.height(45.dp))

        // ÏïåÎ¶º Ï†úÎ™© ÏûÖÎ†•
        OutlinedTextField(
            value = title,
            onValueChange = { title = it },
            label = { Text("ÏïåÎ¶ºÏû• Ï†úÎ™©") },
            modifier = Modifier
                .width(300.dp)
        )
        Spacer(modifier = Modifier.height(10.dp))
        // ÏïåÎ¶º ÎÇ¥Ïö© ÏûÖÎ†•
        OutlinedTextField(
            value = content,
            onValueChange = { content = it },
            label = { Text("ÏïåÎ¶ºÏû• ÎÇ¥Ïö©") },
            modifier = Modifier
                .width(300.dp)
                .height(300.dp)
        )
        Spacer(modifier = Modifier.height(50.dp))

        OutlinedButton(
            onClick = {
                if (title.isNotEmpty() && content.isNotEmpty() && selectedStudent != null) {
                    val newNotice = Notice(
                        id = "", // FirebaseÏóêÏÑú keyÎ•º ÏûêÎèô ÏÉùÏÑ±ÌïòÎèÑÎ°ù Îπà Í∞í ÏÑ§Ï†ï
                        title = title,
                        content = content,
                        studentName = selectedStudent!!.name,
                        date = todayDate
                    )

                    // FirebaseÏóê Ï†ÄÏû•
                    noticeDb.saveNotice(newNotice) { success ->
                        if (success) navController.popBackStack()
                    }
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 30.dp),
            border = BorderStroke(2.dp, Color(0xFF4786FF)),
            colors = ButtonDefaults.outlinedButtonColors(contentColor = Color.Black)
        ) {
            Text("ÏïåÎ¶ºÏû• Ï∂îÍ∞Ä")
        }
    }
}

/**
 * ÏïåÎ¶ºÏû• ÏÉÅÏÑ∏ÌôîÎ©¥ (Composable)
 */
@Composable
fun DetailNoticeScreen(
    navController: NavController,
    notice: Notice,
    noticeDb: NoticeDatabase,
    authManager: AuthManager,
    userRole: String
) {
    val context = LocalContext.current
    var showDialog by remember { mutableStateOf(false) }
    var showCommentDialog by remember { mutableStateOf(false) }
    var comments by remember { mutableStateOf<List<Comment>>(emptyList()) }
    var newComment by remember { mutableStateOf("") }
    var userName by remember { mutableStateOf("ÏÇ¨Ïö©Ïûê") }

    // FirebaseÏóêÏÑú Ìï¥Îãπ ÏïåÎ¶ºÏùò ÎåìÍ∏Ä Í∞ÄÏ†∏Ïò§Í∏∞
    LaunchedEffect(Unit) {
        // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ (Ïù¥Î¶Ñ Ìè¨Ìï®)
        authManager.getCurrentUserInfo { user ->
            user?.let {
                userName = it.name // ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ Ï†ÄÏû•
            }
        }
        // FirebaseÏóêÏÑú Ìï¥Îãπ ÏïåÎ¶ºÏùò ÎåìÍ∏Ä Í∞ÄÏ†∏Ïò§Í∏∞
        noticeDb.getComments(notice.id) { fetchedComments ->
            comments = fetchedComments
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .systemBarsPadding(),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Image(
                painter = painterResource(id = R.drawable.back),
                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                modifier = Modifier
                    .padding(start = 15.dp)
                    .size(25.dp)
                    .clickable {
                        navController.popBackStack()
                    }
            )

            Image(
                painter = painterResource(id = R.drawable.notice3),
                contentDescription = "ÏïåÎ¶ºÏû• ÎÇ¥Ïö©",
                modifier = Modifier.size(200.dp)
            )

            // ÏïåÎ¶ºÏû• ÏÇ≠Ï†ú Î≤ÑÌäº
            Image(
                painter = painterResource(id = R.drawable.trash),
                contentDescription = "Delete notice",
                modifier = Modifier
                    .padding(end = 15.dp)
                    .size(30.dp)
                    .clickable {
                        if (userRole != "admin") {
                            Toast.makeText(context, "Í¥ÄÎ¶¨ÏûêÎßå Ïù¥Ïö© Í∞ÄÎä•Ìïú Í∏∞Îä•ÏûÖÎãàÎã§.", Toast.LENGTH_SHORT).show()
                        } else {
                            showDialog = true
                        }
                    }
            )
        }

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .height(300.dp)
                .verticalScroll(rememberScrollState())
                .padding(20.dp)
        ) {
            Spacer(modifier = Modifier.size(10.dp))
            Text(text = notice.title, fontSize = 30.sp, fontWeight = FontWeight.Bold, lineHeight = 30.sp)
            Spacer(modifier = Modifier.size(20.dp))
            Text(text = notice.content, fontSize = 18.sp)
            Spacer(modifier = Modifier.size(50.dp))
            Text(text = "ÌïôÏÉù: ${notice.studentName}", fontSize = 14.sp, color = Color.Gray)
            Text(text = "ÏûëÏÑ± ÎÇ†Ïßú: ${notice.date}", fontSize = 14.sp, color = Color.Gray)
            Spacer(modifier = Modifier.height(20.dp))

        }
        Column(
            modifier = Modifier
                .padding(20.dp)
                .fillMaxWidth()
                .height(250.dp)
                .verticalScroll(rememberScrollState())
        ) {
            Text("üí¨ ÎåìÍ∏Ä ${comments.size}", fontWeight = FontWeight.Bold)
            Spacer(modifier = Modifier.height(15.dp))

            if (comments.isEmpty()) {
                Text("Îì±Î°ùÎêú ÎåìÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.")
            } else {
                comments.forEachIndexed { index, comment ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Column(modifier = Modifier.weight(1f)) {
                            Text("${comment.author}  ${comment.timestamp}")
                            Text("ÎåìÍ∏Ä : ${comment.text}")
                            Divider()
                            Spacer(modifier = Modifier.size(3.dp))
                        }
                        if (userRole == "admin" || (userRole != "guest" && userName == comment.author)) {
                            Image(
                                painter = painterResource(R.drawable.trash),
                                contentDescription = "ÎåìÍ∏Ä ÏÇ≠Ï†ú",
                                modifier = Modifier
                                    .size(20.dp)
                                    .clickable {
                                        Log.d(
                                            "Firebase",
                                            "üî• ÎåìÍ∏Ä ÏÇ≠Ï†ú Î≤ÑÌäº ÌÅ¥Î¶≠Îê®: commentId=${comment.id}"
                                        ) // ‚úÖ ÏÇ≠Ï†ú Ï†Ñ Î°úÍ∑∏
                                        noticeDb.deleteComment(notice.id, comment.id) { success ->
                                            if (success) {
                                                // üî• FirebaseÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Í∞ÄÏ†∏ÏôÄÏÑú ÏµúÏã† ÏÉÅÌÉú Ïú†ÏßÄ
                                                noticeDb.getComments(notice.id) { updatedComments ->
                                                    comments = updatedComments
                                                }
                                            }
                                        }
                                    }
                            )
                        }
                    }
                }
            }
        }

        // ÎåìÍ∏Ä ÏûëÏÑ± Î≤ÑÌäº
        Button(
            onClick = { showCommentDialog = true },
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4786FF))
        ) {
            Text("ÎåìÍ∏Ä ÏûëÏÑ±", color = Color.White)
        }

        if (showDialog) {
            AlertDialog(
                onDismissRequest = { showDialog = false },
                title = { Text("ÏïåÎ¶ºÏû• ÏÇ≠Ï†ú", fontWeight = FontWeight.Bold) },
                text = { Text("ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?") },
                confirmButton = {
                    Button(
                        onClick = {
                            noticeDb.deleteNotice(notice.id) { success ->
                                if (success) navController.popBackStack()
                            }
                        },
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4786FF))
                    ) {
                        Text("ÏÇ≠Ï†ú", color = Color.White)
                    }
                },
                dismissButton = {
                    Button(
                        onClick = { showDialog = false },
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4786FF))
                    ) {
                        Text("Ï∑®ÏÜå", color = Color.White)
                    }
                }
            )
        }

        // ÎåìÍ∏Ä ÏûëÏÑ± ÌåùÏóÖ Îã§Ïù¥ÏñºÎ°úÍ∑∏
        if (showCommentDialog) {
            AlertDialog(
                onDismissRequest = { showCommentDialog = false },
                title = { Text("ÎåìÍ∏Ä ÏûëÏÑ±", fontWeight = FontWeight.Bold) },
                text = {
                    Column {
                        OutlinedTextField(
                            value = newComment,
                            onValueChange = { newComment = it },
                            placeholder = { Text("ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.") },
                            textStyle = TextStyle(color = Color.Black),
                            singleLine = true,
                            keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),
                            modifier = Modifier.fillMaxWidth()
                        )
                    }
                },
                confirmButton = {
                    Button(
                        onClick = {
                            if (newComment.isNotEmpty()) {
                                val timestamp =
                                    SimpleDateFormat(
                                        "yyyy-MM-dd HH:mm",
                                        Locale.getDefault()
                                    ).format(Date())
                                val comment = Comment(
                                    id = "",
                                    author = userName,
                                    text = newComment,
                                    timestamp = timestamp
                                )
                                noticeDb.addComment(notice.id, comment) { success ->
                                    if (success) {
                                        // üî• FirebaseÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Í∞ÄÏ†∏ÏôÄÏÑú ÏµúÏã† ÏÉÅÌÉú Ïú†ÏßÄ
                                        noticeDb.getComments(notice.id) { updatedComments ->
                                            comments = updatedComments
                                            newComment = ""
                                            showCommentDialog = false
                                        }
                                    }
                                }
                            }
                        },
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4786FF))
                    ) {
                        Text("Îì±Î°ù", color = Color.White)
                    }
                },
                dismissButton = {
                    Button(
                        onClick = { showCommentDialog = false },
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4786FF))
                    ) {
                        Text("Ï∑®ÏÜå", color = Color.White)
                    }
                }
            )
        }
    }
}