package com.example.cv2project

import android.app.Activity
import android.app.Activity.RESULT_OK
import android.content.Intent
import android.net.Uri
import android.util.Log
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.cv2project.firebase.NoticeDatabase
import com.example.cv2project.firebase.StudentDatabase
import com.example.cv2project.models.Comment
import com.example.cv2project.models.Notice
import com.example.cv2project.models.Student
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

/**
 * ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏúºÎ°ú ÏÇ¨Ïö©Ìï† Composable
 * - route Ïòà: "notice"
 */
@Composable
fun NoticeScreen(navController: NavController, noticeDb: NoticeDatabase) {
    var notices by remember { mutableStateOf<List<Notice>>(emptyList()) }

    LaunchedEffect(Unit) {
        noticeDb.getNotices { fetchedNotices ->
            notices = fetchedNotices
        }
    }

    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .background(color = Color.Black),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Icon(
                imageVector = Icons.Default.ArrowBack,
                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                modifier = Modifier
                    .padding(start = 15.dp)
                    .size(25.dp)
                    .clickable { navController.popBackStack() },
                tint = Color.White
            )

            Text("ÏïåÎ¶ºÏû•", fontSize = 25.sp, color = Color.White)

            Icon(
                imageVector = Icons.Default.Add,
                contentDescription = null,
                modifier = Modifier
                    .padding(end = 15.dp)
                    .size(30.dp)
                    .clickable { navController.navigate("addNotice") },
                tint = Color.White
            )
        }

        Column(
            modifier = Modifier
                .padding(10.dp)
                .fillMaxSize()
                .verticalScroll(rememberScrollState())
                .padding(bottom = 20.dp)
        ) {
            if (notices.isEmpty()) {
                Text("Îì±Î°ùÎêú ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§.", modifier = Modifier.padding(16.dp))
            } else {
                notices.forEach { notice ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp)
                            .clickable {
                                navController.navigate(
                                    "detailNotice?id=${notice.id}&title=${notice.title}" +
                                            "&content=${notice.content}" +
                                            "&studentName=${notice.studentName}" +
                                            "&date=${notice.date}"
                                )
                            }
                    ) {
                        Column(modifier = Modifier.padding(16.dp)) {
                            Text("üìÖ ${notice.date}")
                            Text("üéì ÌïôÏÉù: ${notice.studentName}")
                            Text("üìù Ï†úÎ™©: ${notice.title}")
                            Text("üìÑ ÎÇ¥Ïö©: ${notice.content}")
                        }
                    }
                }
            }
        }
    }
}

/**
 * ÏïåÎ¶ºÏû• ÏûëÏÑ± Composable
 * - Navigation GraphÏóêÏÑú routeÎ•º "addNotice"Î°ú Îì±Î°ùÌïòÍ≥†,
 *   navController.navigate("addNotice")Î°ú ÌôîÎ©¥ Ï†ÑÌôò
 */
@Composable
fun AddNoticeScreen(
    navController: NavController,
    studentDb: StudentDatabase,
    noticeDb: NoticeDatabase
) {
    var title by remember { mutableStateOf("") }
    var content by remember { mutableStateOf("") }
    var students by remember { mutableStateOf<List<Student>>(emptyList()) }
    var selectedStudent by remember { mutableStateOf<Student?>(null) }
    val todayDate = getTodayDate() // Ïò§Îäò ÎÇ†Ïßú Í∞ÄÏ†∏Ïò§Í∏∞

    // FirebaseÏóêÏÑú Ï†ÑÏ≤¥ ÌïôÏÉù Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
    LaunchedEffect(Unit) {
        studentDb.loadAllStudents { loadedStudents ->
            students = loadedStudents
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .verticalScroll(rememberScrollState()),
        verticalArrangement = Arrangement.Center
    ) {
        Text("ÏïåÎ¶ºÏû• ÏûëÏÑ±", fontSize = 24.sp, modifier = Modifier.padding(bottom = 16.dp))

        Text("ÌïôÏÉù ÏÑ†ÌÉù", fontSize = 16.sp)
        Spacer(modifier = Modifier.height(8.dp))

        // ÌïôÏÉù Î™©Î°ù
        students.forEach { student ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { selectedStudent = student }
                    .padding(8.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(text = student.name)
                if (selectedStudent == student) {
                    Text("‚úîÔ∏è")
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        OutlinedTextField(
            value = title,
            onValueChange = { title = it },
            label = { Text("ÏïåÎ¶º Ï†úÎ™©") },
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = content,
            onValueChange = { content = it },
            label = { Text("ÏïåÎ¶º ÎÇ¥Ïö©") },
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = {
                if (title.isNotEmpty() && content.isNotEmpty() && selectedStudent != null) {
                    val newNotice = Notice(
                        id = "", // FirebaseÏóêÏÑú keyÎ•º ÏûêÎèô ÏÉùÏÑ±ÌïòÎèÑÎ°ù Îπà Í∞í ÏÑ§Ï†ï
                        title = title,
                        content = content,
                        studentName = selectedStudent!!.name,
                        date = todayDate
                    )

                    // FirebaseÏóê Ï†ÄÏû•
                    noticeDb.saveNotice(newNotice) { success ->
                        if (success) navController.popBackStack()
                    }
                }
            },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
        ) {
            Text("Ï†ÄÏû•", color = Color.White)
        }
    }
}

/**
 * ÏïåÎ¶ºÏû• ÏÉÅÏÑ∏ÌôîÎ©¥ (Composable)
 */
@Composable
fun DetailNoticeScreen(
    navController: NavController,
    notice: Notice,
    noticeDb: NoticeDatabase
) {
    var showDialog by remember { mutableStateOf(false) }
    var showCommentDialog by remember { mutableStateOf(false) }
    var comments by remember { mutableStateOf<List<Comment>>(emptyList()) }
    var newComment by remember { mutableStateOf("") }

    // FirebaseÏóêÏÑú Ìï¥Îãπ ÏïåÎ¶ºÏùò ÎåìÍ∏Ä Í∞ÄÏ†∏Ïò§Í∏∞
    LaunchedEffect(Unit) {
        noticeDb.getComments(notice.id) { fetchedComments ->
            comments = fetchedComments
        }
    }

    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .background(color = Color.Black),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Icon(
                imageVector = Icons.Default.ArrowBack,
                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                modifier = Modifier
                    .padding(start = 15.dp)
                    .size(25.dp)
                    .clickable { navController.popBackStack() },
                tint = Color.White
            )

            Text("ÏïåÎ¶ºÏû• ÎÇ¥Ïö©", fontSize = 25.sp, color = Color.White)

            Icon(
                imageVector = Icons.Default.Delete,
                contentDescription = "ÏÇ≠Ï†ú",
                modifier = Modifier
                    .padding(end = 15.dp)
                    .size(25.dp)
                    .clickable { showDialog = true },
                tint = Color.White
            )
        }

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .height(300.dp)
                .verticalScroll(rememberScrollState())
                .padding(20.dp)
        ) {
            Spacer(modifier = Modifier.size(10.dp))
            Text(text = notice.title, fontSize = 30.sp, fontWeight = FontWeight.Bold)
            Spacer(modifier = Modifier.size(20.dp))
            Text(text = notice.content, fontSize = 18.sp)
            Spacer(modifier = Modifier.size(50.dp))
            Text(text = "ÌïôÏÉù: ${notice.studentName}", fontSize = 14.sp, color = Color.Gray)
            Text(text = "ÏûëÏÑ± ÎÇ†Ïßú: ${notice.date}", fontSize = 14.sp, color = Color.Gray)
            Spacer(modifier = Modifier.height(20.dp))

        }
        Column(
            modifier = Modifier
                .padding(20.dp)
                .fillMaxWidth()
                .height(250.dp)
                .verticalScroll(rememberScrollState())
        ) {
            Text("üí¨ ÎåìÍ∏Ä ${comments.size}")
            Spacer(modifier = Modifier.height(15.dp))

            if (comments.isEmpty()) {
                Text("Îì±Î°ùÎêú ÎåìÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.")
            } else {
                comments.forEachIndexed { index, comment ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Column(modifier = Modifier.weight(1f)) {
                            Text("${comment.author}  ${comment.timestamp}")
                            Text("ÎåìÍ∏Ä : ${comment.text}")
                            Divider()
                            Spacer(modifier = Modifier.size(3.dp))
                        }
                        Image(
                            painter = painterResource(R.drawable.delete),
                            contentDescription = "ÎåìÍ∏Ä ÏÇ≠Ï†ú",
                            modifier = Modifier
                                .size(20.dp)
                                .clickable {
                                    Log.d(
                                        "Firebase",
                                        "üî• ÎåìÍ∏Ä ÏÇ≠Ï†ú Î≤ÑÌäº ÌÅ¥Î¶≠Îê®: commentId=${comment.id}"
                                    ) // ‚úÖ ÏÇ≠Ï†ú Ï†Ñ Î°úÍ∑∏
                                    noticeDb.deleteComment(notice.id, comment.id) { success ->
                                        if (success) {
                                            // üî• FirebaseÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Í∞ÄÏ†∏ÏôÄÏÑú ÏµúÏã† ÏÉÅÌÉú Ïú†ÏßÄ
                                            noticeDb.getComments(notice.id) { updatedComments ->
                                                comments = updatedComments
                                            }
                                        }
                                    }
                                }
                        )
                    }
                }
            }
        }

        // ÎåìÍ∏Ä ÏûëÏÑ± Î≤ÑÌäº
        Button(
            onClick = { showCommentDialog = true },
            modifier = Modifier.padding(16.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
        ) {
            Text("ÎåìÍ∏Ä ÏûëÏÑ±", color = Color.White)
        }

        if (showDialog) {
            AlertDialog(
                onDismissRequest = { showDialog = false },
                title = { Text("ÏïåÎ¶ºÏû• ÏÇ≠Ï†ú") },
                text = { Text("ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?") },
                confirmButton = {
                    Button(
                        onClick = {
                            noticeDb.deleteNotice(notice.id) { success ->
                                if (success) navController.popBackStack()
                            }
                        }
                    ) {
                        Text("ÏÇ≠Ï†ú")
                    }
                },
                dismissButton = {
                    Button(onClick = { showDialog = false }) {
                        Text("Ï∑®ÏÜå")
                    }
                }
            )
        }
        // ÎåìÍ∏Ä ÏûëÏÑ± ÌåùÏóÖ Îã§Ïù¥ÏñºÎ°úÍ∑∏
        if (showCommentDialog) {
            AlertDialog(
                onDismissRequest = { showCommentDialog = false },
                title = { Text("ÎåìÍ∏Ä ÏûëÏÑ±") },
                text = {
                    Column {
                        OutlinedTextField(
                            value = newComment,
                            onValueChange = { newComment = it },
                            placeholder = { Text("ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.") },
                            textStyle = TextStyle(color = Color.Black),
                            singleLine = true,
                            keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),
                            modifier = Modifier.fillMaxWidth()
                        )
                    }
                },
                confirmButton = {
                    Button(
                        onClick = {
                            if (newComment.isNotEmpty()) {
                                val timestamp =
                                    SimpleDateFormat(
                                        "yyyy-MM-dd HH:mm",
                                        Locale.getDefault()
                                    ).format(Date())
                                val comment = Comment(
                                    id = "",
                                    author = "ÏÇ¨Ïö©Ïûê",
                                    text = newComment,
                                    timestamp = timestamp
                                )
                                noticeDb.addComment(notice.id, comment) { success ->
                                    if (success) {
                                        // üî• FirebaseÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Í∞ÄÏ†∏ÏôÄÏÑú ÏµúÏã† ÏÉÅÌÉú Ïú†ÏßÄ
                                        noticeDb.getComments(notice.id) { updatedComments ->
                                            comments = updatedComments
                                            newComment = ""
                                            showCommentDialog = false
                                        }
                                    }
                                }
                            }
                        }) {
                        Text("Îì±Î°ù")
                    }
                },
                dismissButton = {
                    Button(onClick = { showCommentDialog = false }) {
                        Text("Ï∑®ÏÜå")
                    }
                }
            )
        }
    }
}