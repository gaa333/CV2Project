package com.example.cv2project

import android.annotation.SuppressLint
import android.app.Activity
import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.cv2project.preferences.Comment
import com.example.cv2project.preferences.CommentPreferences
import com.example.cv2project.ui.theme.CV2ProjectTheme
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class DetailNoticeActivity : ComponentActivity() {
    @SuppressLint("RememberReturnType")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        // Ï†ÑÎã¨Îêú Îç∞Ïù¥ÌÑ∞ Î∞õÍ∏∞
        val title = intent.getStringExtra("title") ?: "Ï†úÎ™© ÏóÜÏùå"
        val content = intent.getStringExtra("content") ?: "ÎÇ¥Ïö© ÏóÜÏùå"
        val studentName = intent.getStringExtra("studentName") ?: "Ïù¥Î¶Ñ ÏóÜÏùå"
        val date = intent.getStringExtra("date") ?: "ÎÇ†Ïßú ÏóÜÏùå"

        val noticeId = "$title-$date" // Í≥†Ïú† ÏïåÎ¶ºÏû• id

        setContent {
            val commentPrefs = remember { CommentPreferences(this) }
            val comments = remember { mutableStateOf(commentPrefs.loadComments(noticeId)) }
            val newComment = remember { mutableStateOf("") }

            CV2ProjectTheme {
                DetailNoticeScreen(
                    title,
                    content,
                    studentName,
                    date,
                    comments,
                    newComment,
                    noticeId,
                    commentPrefs
                )
            }
        }
    }
}

@Composable
fun DetailNoticeScreen(
    title: String,
    content: String,
    studentName: String,
    date: String,
    comments: MutableState<List<Comment>>,
    newComment: MutableState<String>,
    noticeId: String,
    commentPrefs: CommentPreferences
) {
    val context = LocalContext.current as? Activity
    var showDialog by remember { mutableStateOf(false) }
    var showCommentDialog = remember { mutableStateOf(false) } // ÌåùÏóÖÏ∞Ω ÏÉÅÌÉú


    Column(
        modifier = Modifier
            .fillMaxSize(),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .background(color = Color.Black),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Absolute.SpaceBetween
        ) {
            Icon(
                imageVector = Icons.Default.ArrowBack,
                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                modifier = Modifier
                    .padding(start = 15.dp)
                    .size(25.dp)
                    .clickable { context?.finish() },
                tint = Color.White
            )
            Text(
                "ÏïåÎ¶ºÏû• ÎÇ¥Ïö©",
                color = Color.White,
                fontSize = 25.sp
            )

            Icon(
                imageVector = Icons.Default.Delete,
                contentDescription = "Delete notice",
                modifier = Modifier
                    .padding(end = 15.dp)
                    .size(25.dp)
                    .clickable { showDialog = true },
                tint = Color.White
            )

            if (showDialog) {
                AlertDialog(
                    onDismissRequest = { showDialog = false },
                    title = { Text("ÏïåÎ¶ºÏû• ÏÇ≠Ï†ú") },
                    text = { Text("ÎÇ¥Ïö©Ïù¥ ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÎê©ÎãàÎã§. \nÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?") },
                    confirmButton = {
                        Button(
                            onClick = {
                                val resultIntent = Intent().apply {
                                    putExtra("delete_title", title)
                                    putExtra("delete_content", content)
                                    putExtra("delete_studentName", studentName)
                                    putExtra("delete_date", date)
                                }
                                // ÌòÑÏû¨ Ïª®ÌÖçÏä§Ìä∏Î•º ActivityÎ°ú Ï∫êÏä§ÌåÖÌïòÏó¨ setResultÏôÄ finish Ìò∏Ï∂ú
                                context?.apply {
                                    setResult(Activity.RESULT_OK, resultIntent)
                                    finish()
                                }
                            }
                        ) {
                            Text("ÏÇ≠Ï†ú")
                        }
                    },
                    dismissButton = {
                        Button(
                            onClick = { showDialog = false }
                        ) {
                            Text("Ï∑®ÏÜå")
                        }
                    }
                )
            }
        }
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .height(200.dp)
                .verticalScroll(rememberScrollState())
                .padding(20.dp)
        ) {
            // ÏïåÎ¶ºÏû• ÏÑ∏Î∂Ä ÎÇ¥Ïö©
            Spacer(modifier = Modifier.size(10.dp))
            // notice Ï†úÎ™©
            Text(
                text = title,
                fontSize = 30.sp,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(20.dp))
            // Í≥µÏßÄÏÇ¨Ìï≠ ÎÇ¥Ïö©
            Text(text = content, fontSize = 18.sp)
            Spacer(modifier = Modifier.height(50.dp))
            Row(
                modifier = Modifier.fillMaxWidth()
            ) {
                // ÌïôÏÉùÎ™Ö
                Text(
                    text = "$studentName ÌïôÏÉù",
                    fontSize = 14.sp,
                    color = Color.Gray,
                    modifier = Modifier.weight(1f)
                )
                // ÏûëÏÑ± ÎÇ†Ïßú
                Text(
                    text = "ÏûëÏÑ± ÎÇ†Ïßú: $date",
                    fontSize = 14.sp,
                    color = Color.Gray
                )
            }
            Spacer(modifier = Modifier.height(20.dp))
            Divider(Modifier.width(1.dp))
        }
        Column(
            modifier = Modifier
                .padding(20.dp)
                .fillMaxWidth()
                .height(300.dp)
        ) {
            // ÎåìÍ∏Ä ÌëúÏãú
            Text("üí¨ ÎåìÍ∏Ä ${comments.value.size}")
            Spacer(modifier = Modifier.height(15.dp))
            if (comments.value.isEmpty()) {
                Text("Îì±Î°ùÎêú ÎåìÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.")
            } else {
                comments.value.forEachIndexed { index, comment ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Column(modifier = Modifier.weight(1f)) {
                            Text("${comment.author}  ${comment.timestamp}")
                            Text("ÎåìÍ∏Ä : ${comment.text}")
                            Divider()
                            Spacer(modifier = Modifier.size(3.dp))
                        }
                        Image(
                            painter = painterResource(R.drawable.delete), // Ìú¥ÏßÄÌÜµ ÏïÑÏù¥ÏΩò
                            contentDescription = "ÎåìÍ∏Ä ÏÇ≠Ï†ú",
                            modifier = Modifier
                                .size(20.dp)
                                .clickable {
                                    val updatedComments = comments.value.toMutableList()
                                    updatedComments.removeAt(index) // ÏÑ†ÌÉùÌïú ÎåìÍ∏Ä ÏÇ≠Ï†ú
                                    comments.value = updatedComments
                                    commentPrefs.saveComments(
                                        noticeId,
                                        updatedComments
                                    ) // SharedPreferencesÏóê Ï†ÄÏû•
                                }
                        )
                    }
                }
            }
        }
        Button(
            onClick = {
                showCommentDialog.value = true
            },
            modifier = Modifier.padding(16.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color.Black
            )
        ) {
            Text("ÎåìÍ∏Ä ÏûëÏÑ±", color = Color.White)
        }
    }
    // ÎåìÍ∏Ä ÏûÖÎ†• ÌåùÏóÖ Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (showCommentDialog.value) {
        AlertDialog(
            onDismissRequest = { showCommentDialog.value = false },
            title = { Text("ÎåìÍ∏Ä ÏûëÏÑ±") },
            text = {
                Column {
                    OutlinedTextField(
                        value = newComment.value,
                        onValueChange = { newComment.value = it },
                        placeholder = { Text("ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.") },
                        textStyle = TextStyle(color = Color.Black),
                        singleLine = true,
                        keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done)
                    )
                }
            },
            confirmButton = {
                Button(
                    onClick = {
                        if (newComment.value.isNotEmpty()) {
                            val newCommentData = Comment(
                                author = "ÏÇ¨Ïö©Ïûê", // Ïã§Ï†ú ÏÇ¨Ïö©Ïûê Ïù¥Î¶ÑÏúºÎ°ú Î≥ÄÍ≤Ω Í∞ÄÎä•
                                text = newComment.value,
                                timestamp = SimpleDateFormat(
                                    "MMÏõî ddÏùº HH:mm",
                                    Locale.getDefault()
                                ).format(Date())
                            )
                            val updatedComments = comments.value + newCommentData
                            comments.value = updatedComments
                            commentPrefs.saveComments(noticeId, updatedComments)
                            newComment.value = ""
                            showCommentDialog.value = false // ÌåùÏóÖ Îã´Í∏∞
                        }
                    }
                ) {
                    Text("Îì±Î°ù")
                }
            },
            dismissButton = {
                Button(
                    onClick = { showCommentDialog.value = false }
                ) {
                    Text("Ï∑®ÏÜå")
                }
            }
        )
    }
}

